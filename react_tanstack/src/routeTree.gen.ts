/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ChaiRouteImport } from './routes/chai'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppDashboardRouteImport } from './routes/app/dashboard'
import { Route as ProductPidRouteImport } from './routes/Product.$pid'

const ProductLazyRouteImport = createFileRoute('/Product')()

const ProductLazyRoute = ProductLazyRouteImport.update({
  id: '/Product',
  path: '/Product',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/Product.lazy').then((d) => d.Route))
const ChaiRoute = ChaiRouteImport.update({
  id: '/chai',
  path: '/chai',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const ProductPidRoute = ProductPidRouteImport.update({
  id: '/$pid',
  path: '/$pid',
  getParentRoute: () => ProductLazyRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/chai': typeof ChaiRoute
  '/Product': typeof ProductLazyRouteWithChildren
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/chai': typeof ChaiRoute
  '/Product': typeof ProductLazyRouteWithChildren
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/chai': typeof ChaiRoute
  '/Product': typeof ProductLazyRouteWithChildren
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/about'
    | '/chai'
    | '/Product'
    | '/Product/$pid'
    | '/app/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/about'
    | '/chai'
    | '/Product'
    | '/Product/$pid'
    | '/app/dashboard'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/about'
    | '/chai'
    | '/Product'
    | '/Product/$pid'
    | '/app/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ChaiRoute: typeof ChaiRoute
  ProductLazyRoute: typeof ProductLazyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Product': {
      id: '/Product'
      path: '/Product'
      fullPath: '/Product'
      preLoaderRoute: typeof ProductLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chai': {
      id: '/chai'
      path: '/chai'
      fullPath: '/chai'
      preLoaderRoute: typeof ChaiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/Product/$pid': {
      id: '/Product/$pid'
      path: '/$pid'
      fullPath: '/Product/$pid'
      preLoaderRoute: typeof ProductPidRouteImport
      parentRoute: typeof ProductLazyRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface ProductLazyRouteChildren {
  ProductPidRoute: typeof ProductPidRoute
}

const ProductLazyRouteChildren: ProductLazyRouteChildren = {
  ProductPidRoute: ProductPidRoute,
}

const ProductLazyRouteWithChildren = ProductLazyRoute._addFileChildren(
  ProductLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ChaiRoute: ChaiRoute,
  ProductLazyRoute: ProductLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
